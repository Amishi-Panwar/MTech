class Solution {
    public List<String> construct(char board[][]){
        List<String> temp =new ArrayList<>();
        for(int i=0;i<board.length;i++)
            temp.add(new String(board[i]));
        return temp;
    }

    public void solveNQueensUtil(int col, char board[][], List<List<String>>result, int leftrow[], int upperdiagonal[], int lowerdiagonal[]){
        if(col == board.length){
            result.add(construct(board));
            return;
        }

        for(int row=0; row<board.length; row++){
            if(leftrow[row]==0 && upperdiagonal[board.length-1+col-row] == 0 && lowerdiagonal[row+col]==0){
                board[row][col]='Q';
                leftrow[row] = 1;
                upperdiagonal[board.length-1+col-row] = 1;
                lowerdiagonal[row+col] = 1;
                solveNQueensUtil(col+1,board,result,leftrow,upperdiagonal,lowerdiagonal);
                board[row][col]='.';
                leftrow[row] = 0;
                upperdiagonal[board.length-1+col-row] = 0;
                lowerdiagonal[row+col] = 0;
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        char board[][] = new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j] = '.';
            }
        }
        List<List<String>> result = new ArrayList<>();
        
        //to check if any element in left of that row is occupied
        int leftrow[] = new int[n];
        
        //to check if any element in upperdiagonal[board.length-1+col-row] == 0 is occupied
        int upperdiagonal[] = new int[2*n-1];
        
        //to check if any element in lowerdiagonal[row+col]==0 is occupied....all diagonal values same
        int lowerdiagonal[] = new int[2*n-1];
        
        solveNQueensUtil(0,board,result,leftrow,upperdiagonal,lowerdiagonal);
        return result;
    }
}
