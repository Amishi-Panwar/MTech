class Solution {
    public static void combinationSum2Util(int index, int[] candidates, int target, List<Integer> ds, List<List<Integer>> result){

        if(target == 0)
            result.add(new ArrayList<>(ds));
           
        //sort array before to skip same elements in array to avoid duplicates
        //choosing at index position, which element of array can take place, if elements are duplicate, skip it and move to next to avoid duplicates
        for(int i=index;i<candidates.length;i++){
            if(i > index && candidates[i] == candidates[i-1])
                continue;
            if(candidates[i] > target)
                break;
            ds.add(candidates[i]);
            combinationSum2Util(i+1, candidates, target-candidates[i], ds, result);
            ds.remove(ds.size()-1);
        }
        
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList();
        Arrays.sort(candidates);
        List<Integer> ds = new ArrayList<>();
        combinationSum2Util(0,candidates, target, ds, result);
        return result;
    }
}
