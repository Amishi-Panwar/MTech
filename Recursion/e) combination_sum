class Solution {
    public static void combinationSumUtil(int index, int[] candidates, int sum, int target, List<List<Integer>> result, List<Integer> ds){
        if(index >= candidates.length)
            return;
        if(sum > target)
            return;
        if(sum == target){
            result.add(new ArrayList<>(ds));
            return;
        }
        
        sum += candidates[index];
        ds.add(candidates[index]);
        combinationSumUtil(index, candidates, sum, target, result, ds);
        sum -= candidates[index];
        ds.remove(ds.size()-1);
        combinationSumUtil(index+1, candidates, sum, target, result, ds);

    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        combinationSumUtil(0,candidates, 0, target, result, ds);
        return result;
    }
}

