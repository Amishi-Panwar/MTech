class Solution {

    public int totalNQueensUtil(int col, char board[][], int leftrow[], int upperdiagonal[], int lowerdiagonal[]){
        if(col == board.length){
            return 1;
        }
        int count =0;
        for(int row=0; row<board.length; row++){
            if(leftrow[row]==0 && upperdiagonal[board.length-1+col-row] == 0 && lowerdiagonal[row+col]==0){
                board[row][col]='Q';
                leftrow[row] = 1;
                upperdiagonal[board.length-1+col-row] = 1;
                lowerdiagonal[row+col] = 1;
                count += totalNQueensUtil(col+1,board,leftrow,upperdiagonal,lowerdiagonal);
                board[row][col]='.';
                leftrow[row] = 0;
                upperdiagonal[board.length-1+col-row] = 0;
                lowerdiagonal[row+col] = 0;
            }
        }
        return count;
    }

    public int totalNQueens(int n) {
        char board[][] = new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j] = '.';
            }
        }
        int leftrow[] = new int[n];
        int upperdiagonal[] = new int[2*n-1];
        int lowerdiagonal[] = new int[2*n-1];
        return totalNQueensUtil(0,board,leftrow,upperdiagonal,lowerdiagonal);

    }
}
