class Solution {
    public void swap(int i, int j, int nums[]){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    public void permuteUniqueUtil(int index, int nums[], Set<List<Integer>>result){
        if(index == nums.length){
            List<Integer> ds = new ArrayList<>();
            for(int i=0;i<nums.length;i++)
                ds.add(nums[i]);
            result.add(new ArrayList<>(ds));
            return;
        }
        for(int i=index;i<nums.length;i++){
            if(i>index && nums[i]==nums[index])
                continue;
            swap(i,index,nums);
            permuteUniqueUtil(index+1,nums,result);
            swap(i,index,nums);
            
        }
    }
    public List<List<Integer>> permuteUnique(int[] nums) {
        //set used to remove duplicates
        Set<List<Integer>> result = new HashSet<>();
        Arrays.sort(nums);
        permuteUniqueUtil(0,nums,result);
        List<List<Integer>> ans = new ArrayList<>(result);
        return ans;
    }
}
