/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int height(TreeNode root){
        int height = 0;
        if(root==null)
            return height;
        return 1+Math.max(height(root.left),height(root.right));
    }
    
    
    public boolean isBalanced(TreeNode root) {
        if(root == null)
            return true;

        if(Math.abs((height(root.left)-height(root.right)))<2){
               if(isBalanced(root.left) &&  isBalanced(root.right))
                    return true;
                else 
                    return false;
        }
        return false;
    
    }
}
____________________________________________________________________________________________________________________________________
public int maxDepth(TreeNode root) {
    // Add below line to come out of recursion quickly as soon as imbalance is found 
    if (!result) return 0;
    if (root == null)
        return 0;
    int l = maxDepth(root.left);
    int r = maxDepth(root.right);
    if (Math.abs(l - r) > 1)
        result = false;
    return 1 + Math.max(l, r);
}
}
