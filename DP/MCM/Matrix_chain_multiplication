import java.util.* ;
import java.io.*; 

public class Solution {
    public static int f(int i, int j, int arr[], int dp[][]){
        int min=Integer.MAX_VALUE;
        int steps = 0;
        if(i==j)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        for(int k=i;k<j;k++){
           steps = arr[i-1]*arr[k]*arr[j]+f(i,k,arr,dp)+f(k+1,j,arr,dp);
           min = Math.min(min, steps);
        }
        return dp[i][j]=min;
    }
	public static int matrixMultiplication(int[] arr , int N) {
		int dp[][] = new int[N][N];
        for(int row[] : dp)
            Arrays.fill(row,-1);
        return f(1, N-1, arr, dp);   
	}
}
___________________________________________________________________________________________________________________________
//TABULIZATION

	public static int matrixMultiplication(int[] arr , int N) {
		int dp[][] = new int[N][N];
        for(int i=0;i<N;i++)
            dp[i][i]=0;
        
        for(int i=N-1;i>=1;i--){
            for(int j=i+1;j<N;j++){
                int min=Integer.MAX_VALUE;
                int steps = 0;
                for(int k=i;k<j;k++){
                   steps = arr[i-1]*arr[k]*arr[j]+dp[i][k]+dp[k+1][j];
                   min = Math.min(min, steps);
                }
                dp[i][j]=min;
            }
        }
        
        return dp[1][N-1];   
	}
}
