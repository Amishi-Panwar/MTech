class Solution {
    public int f(int i, int j, int nums[], int dp[][]){
        if(i>j)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        int max = Integer.MIN_VALUE;
        int cost=0;
        for(int index=i;index<=j;index++){
            cost = nums[i-1]*nums[index]*nums[j+1]+ f(i,index-1,nums,dp)+f(index+1,j,nums,dp);
            max = Math.max(max,cost);
        }
        return dp[i][j]=max;
    }
    public int maxCoins(int[] nums) {
        int m = nums.length;
        int numsNew[] = new int[m+2];
        numsNew[0]=1;
        numsNew[m+1]=1;
        for(int i=0;i<m;i++)
            numsNew[i+1]=nums[i];
        int dp[][] = new int[m+2][m+2];
        for(int row[] : dp)
            Arrays.fill(row,-1);
        return f(1,m,numsNew,dp);
    }
}
_________________________________________________________________________________________________________________________
//TABULIZATION
public int maxCoins(int[] nums) {
        int m = nums.length;
        int numsNew[] = new int[m+2];
        numsNew[0]=1;
        numsNew[m+1]=1;
        for(int i=0;i<m;i++)
            numsNew[i+1]=nums[i];
        int dp[][] = new int[m+2][m+2];
        for(int i=m;i>=1;i--){
            for(int j=1;j<=m;j++){
                if(i>j)
                    continue;
                int max = Integer.MIN_VALUE;
                int cost=0;
                for(int index=i;index<=j;index++){
                    cost = numsNew[i-1]*numsNew[index]*numsNew[j+1]+ dp[i][index-1]+dp[index+1][j];
                    max = Math.max(max,cost);
                }
                dp[i][j]=max;
            }
        }
        return dp[1][m];
    }
  
