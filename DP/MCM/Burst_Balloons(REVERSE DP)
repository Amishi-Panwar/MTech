class Solution {
    public int f(int i, int j, int nums[], int dp[][]){
        if(i>j)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        int max = Integer.MIN_VALUE;
        int cost=0;
        for(int index=i;index<=j;index++){
            cost = nums[i-1]*nums[index]*nums[j+1]+ f(i,index-1,nums,dp)+f(index+1,j,nums,dp);
            max = Math.max(max,cost);
        }
        return dp[i][j]=max;
    }
    public int maxCoins(int[] nums) {
        int m = nums.length;
        int numsNew[] = new int[m+2];
        numsNew[0]=1;
        numsNew[m+1]=1;
        for(int i=0;i<m;i++)
            numsNew[i+1]=nums[i];
        int dp[][] = new int[m+2][m+2];
        for(int row[] : dp)
            Arrays.fill(row,-1);
        return f(1,m,numsNew,dp);
    }
}
_________________________________________________________________________________________________________________________
//TABULIZATION
public int maxCoins(int[] nums) {
        int m = nums.length;
        int numsNew[] = new int[m+2];
        numsNew[0]=1;
        numsNew[m+1]=1;
        for(int i=0;i<m;i++)
            numsNew[i+1]=nums[i];
        int dp[][] = new int[m+2][m+2];
        for(int i=m;i>=1;i--){
            for(int j=1;j<=m;j++){
                if(i>j)
                    continue;
                int max = Integer.MIN_VALUE;
                int cost=0;
                for(int index=i;index<=j;index++){
                    cost = numsNew[i-1]*numsNew[index]*numsNew[j+1]+ dp[i][index-1]+dp[index+1][j];
                    max = Math.max(max,cost);
                }
                dp[i][j]=max;
            }
        }
        return dp[1][m];
    }
    public class Solution {
    public int f(int i, int j, int flag, String A){
        if(i>j)
            return 0;
        if(i==j){
            if(flag==1)
                A.charAt(i)==T?1:0;
            else
                A.charAt(i)==F?1:0;
        }
        int count=0;
        for(int index=i+1;index<=j-1;index=index+2){
            int lt = f(i,index-1,1,A);
            int lf = f(i,index-1,0,A);
            int rt = f(index+1,j,1,A);
            int rf = f(index+1,j,0,A);
            if(A.charAt(index)=='|'){
                if(flag==1){
                    count += lt*rt + lt*rf + lf*rt;
                }else{
                    count += lf*rf;
                }
            }else if(A.charAt(index)=='&'){
                if(flag==1){
                    count += lt*rt;
                }else{
                    count += lt*rf + rt*lf + lf*rf;
                }
            }else{
                if(flag==1){
                    count += lt*rt + lf*rf;
                }else{
                    count += lt*rf + rt*lf;
                }
            }
        }
        return count;
    }
    public int cnttrue(String A) {
        int n = A.length();
        return f(0,n-1,1,A);
Practice
Improve your coding skills with our resources
Resources
Experience learning
Contests
Compete in popular contests with top coders
Online Ide
checkout our improved IDE
Free Mock
Practice Mock Interview
scaler_logo
Scaler
Explore offerings by SCALER
scaler_logoEventsNew
interviewbit
Report Issue
feedback
Description
Discussion
Submissions
Hints
Programming
/
Dynamic Programming
/
Evaluate Expression To True
Evaluate Expression To True
medium
37.9% Success
Asked In:
Amazon

Given an expression, A, with operands and operators (OR , AND , XOR), in how many ways can you evaluate the expression to true, by grouping in different ways?

Operands are only true and false.

Return the number of ways to evaluate the expression modulo 103 + 3.


Input Format:

The first and the only argument of input will contain a string, A.

The string A, may contain these characters:
    '|' will represent or operator 
    '&' will represent and operator
    '^' will represent xor operator
    'T' will represent true operand
    'F' will false

Output:

Return an integer, representing the number of ways to evaluate the string.

Constraints:

1 <= length(A) <= 150

Example:

Input 1:
    A = "T|F"

Output 1:
    1

Explanation 1:
    The only way to evaluate the expression is:
        => (T|F) = T 

Input 2:
    A = "T^T^F"
    
Output 2:
    0
    
Explanation 2:
    There is no way to evaluate A to a true statement.

Show similar questions
Max edge queries!
56 minutes medium
Asked in:
Tiling With Dominoes
60 minutes medium
Asked in:
Maximum Path in Triangle
32 minutes easy
Asked in:
Note:You only need to implement the given function. Do not read input, instead use the arguments to the function. Do not print the output, instead return values as specified. Still have a question? Checkout Sample Codes for more details.
submission-count
10924successful submissions.
See Expected Output
Seen this question in a real interview before
Yes
No
00 : 18 : 05
Score:
265
/
350
Java 8 (oracle-jdk-1.8)
Old view
27
24
25
26
28
29
30
31
32
33
34
22
23
35
36
37
19
20
21
16
17
18
14
15
11
12
13
Output

Compiling your Code...
> Success!
Running Test Cases...
> TestCase - Trivial Case Correctness  Failed
Your submission failed for the following input
A : "F|T^T&F"

The expected return value: 
2
Your function returned the following: 
0
Test as custom input
F|T^T&F

Final Verdict
> Wrong Answer

All Problems
257/645
Test with custom input

superman
Hey, we have opened Hint 1 for you for free.
Free Mock Assessment
Powered By
Fill up the details for personalised experience.
All fields are mandatory
Current Employer *
Enter company name *
Please enter valid Employer name
Graduation Year *
Select an option *
Phone Number *
OTP will be sent to this number for verification
+91 *
Phone Number
Phone Number *
OTP will be sent to this number for verification
+91 *
Phone Number
Graduation Year *
Graduation Year *
*Enter the expected year of graduation if you're student
Current Employer *
Company Name *
Please enter valid Employer name
By clicking on Start Test, I agree to be contacted by Scaler in the future.
Already have an account? Log in
Free Mock Assessment
Powered By
Instructions from Interviewbit
Start Test

    }
}
