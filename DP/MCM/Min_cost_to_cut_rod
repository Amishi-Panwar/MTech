class Solution {
    public int f(int i, int j, int cuts[], int dp[][]){
        if(i>j)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        int minCost = Integer.MAX_VALUE;
        int cost=0;
        for(int index=i;index<=j;index++){
            cost = cuts[j+1]-cuts[i-1]+f(i, index-1, cuts,dp)+f(index+1,j,cuts,dp);
            minCost = Math.min(cost,minCost);
        }
        return dp[i][j]=minCost;
    }
    public int minCost(int n, int[] cuts) {
        Arrays.sort(cuts);
        int m = cuts.length;
        int cutNew[] = new int[m+2];
        cutNew[0]=0;
        cutNew[m+1]=n;
        for(int i=0;i<m;i++)
            cutNew[i+1]=cuts[i];
        int dp[][] = new int[m+2][m+2];
        for(int row[] :dp)
            Arrays.fill(row,-1);
        return f(1,m,cutNew,dp);
    }
}
__________________________________________________________________________________________________________________________
//TABULIZATION
  public int minCost(int n, int[] cuts) {
        Arrays.sort(cuts);
        int m = cuts.length;
        int cutNew[] = new int[m+2];
        cutNew[0]=0;
        cutNew[m+1]=n;
        for(int i=0;i<m;i++)
            cutNew[i+1]=cuts[i];
        int dp[][] = new int[m+2][m+2];

        for(int i=m;i>=1;i--){
            for(int j=1;j<=m;j++){
                if(i>j)
                    continue;
                int minCost = Integer.MAX_VALUE;
                int cost=0;
                for(int index=i;index<=j;index++){
                    cost = cutNew[j+1]-cutNew[i-1]+dp[i][index-1]+dp[index+1][j];
                    minCost = Math.min(cost,minCost);
                }
                dp[i][j]=minCost;
            }
        }
        return dp[1][m];
    }
