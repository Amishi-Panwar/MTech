//-1 in ans to excluded when cut is at end of string
class Solution {
    public boolean isPalindrome(int start, int end, String s){
        while(start<end){
            if(s.charAt(start)!=s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
    public int f(int i, String s, int dp[]){
        int n = s.length();
        if(i==n)
            return 0;
        if(dp[i]!=-1)
            return dp[i];
        int minCut = Integer.MAX_VALUE;
        int cuts=0;
        for(int index=i;index<n;index++){
            if(isPalindrome(i,index,s)){
                cuts = 1+f(index+1,s,dp);
                minCut = Math.min(minCut,cuts);
            }
        }
        return dp[i]=minCut;
    }
    public int minCut(String s) {
        int n = s.length();
        int dp[] = new int[n];
        Arrays.fill(dp,-1);
        return f(0, s, dp)-1;
    }
}
________________________________________________________________________________________________________________________________
class Solution {
    public boolean isPalindrome(int start, int end, String s){
        while(start<end){
            if(s.charAt(start)!=s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
    public int minCut(String s){
        int n = s.length();
        int dp[] = new int[n+1];
        dp[n] = 0;
        for(int i=n-1;i>=0;i--){
            int minCut = Integer.MAX_VALUE;
            int cuts=0;
            for(int index=i;index<n;index++){
                if(isPalindrome(i,index,s)){
                    cuts = 1+dp[index+1];
                    minCut = Math.min(minCut,cuts);
                }
            }
            dp[i]=minCut;
        }
        return dp[0]-1;
    }
}
