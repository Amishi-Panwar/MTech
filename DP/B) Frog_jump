import java.util.* ;
import java.io.*; 
public class Solution {
   
    public static int f(int n, int heights[], int dp[]){
        if(n==0)
            return 0;
        if(dp[n]!=-1)
            return dp[n];
        int left = f(n-1, heights, dp)+ Math.abs(heights[n]-heights[n-1]);
        int right = Integer.MAX_VALUE;
        if(n>1)
            right = f(n-2,heights, dp)+ Math.abs(heights[n]-heights[n-2]);
        return dp[n]=Math.min(left, right);
    }
    
    //SPACE OPTIMIZATION
    public static int frogJump(int n, int heights[]) {
        int prev=0;
        int prev2=0;
        for(int i=1;i<n;i++){
            int fs = prev + Math.abs(heights[i]-heights[i-1]);
            int ss = Integer.MAX_VALUE;
            if(i>1)
                ss = prev2 + Math.abs(heights[i]-heights[i-2]); 
            int curi = Math.min(fs, ss);
            prev2 = prev;
            prev = curi;
        }
        return prev;
    }

}
