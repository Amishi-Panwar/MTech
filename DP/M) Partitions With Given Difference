import java.util.* ;
import java.io.*; 
public class Solution {
    public static int f(int index,int num[],int target,int dp[][]){
        if(index==0){
            if(target == 0 && num[0]==0)
                return 2;
            if(target == 0 || target == num[0])
                return 1;
            return 0;
        }

        if(dp[index][target]!=-1)
            return dp[index][target];
        
        int notpick = f(index-1,num,target,dp);
        int pick = 0;
        if(num[index]<=target)
            pick = f(index-1,num,target-num[index],dp);
        return dp[index][target] = (pick + notpick)%1000000007;
    }
    
	public static int countPartitions(int n, int d, int[] arr) {
        int total = 0;
        for(int i=0;i<n;i++)
            total += arr[i];
        int k = (total-d)/2;
        if(total-d<0 || (total-d)%2==1)
            return 0;
		int dp[][] = new int[n][k+1];
        for(int row[]: dp)
            Arrays.fill(row,-1);
        return f(n-1,arr,k,dp);
	}
}
