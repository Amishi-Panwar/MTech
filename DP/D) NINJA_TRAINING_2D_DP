//Getting runtime error for large inputs
---------------------------------------------------------------------------------
//FILL ARRAY WITH -1
// int dp[][] = new int[n+1][4];    
// for (int[] row: dp)
//   Arrays.fill(row, -1);
---------------------------------------------------------------------------------
//MEMOIZATION
.....................................................................................
public class Solution {
public static int f(int day, int last, int points[][], int dp[][]){
    if(dp[day][last]!=-1)
            return dp[day][last];   
    
    if(day == 0){
           int max=0;
           for(int i=0;i<3;i++){
               if(i!=last)
                   max = Math.max(max, points[day][i]);
           }
           return dp[day][last] = max;
       }
    
        int max=0;
        for(int i=0;i<3;i++){
            if(i!=last)
                max = Math.max(max, (points[day][i]+f(day-1,i,points,dp)));
        }
        return dp[day][last] = max;
    }
    public static int ninjaTraining(int n, int points[][]) {
        int dp[][] = new int[n+1][4];
        for(int i=0;i<=n;i++)
            for(int j=0;j<4;j++){
                dp[i][j]=-1;
            }
        return f(n-1, 3, points, dp);
    }
    
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //TABULIZATION
 .......................................
 int dp[][] = new int[n][4];
        dp[0][0] = Math.max(points[0][1], points[0][2]);
        dp[0][1] = Math.max(points[0][0], points[0][2]);
        dp[0][2] = Math.max(points[0][0], points[0][1]);
        dp[0][3] = Math.max(Math.max(points[0][0], points[0][1]),points[0][2]);
        
        for(int day=1;day<n;day++){
            for(int last=0;last<4;last++){
                dp[day][last] = 0;
                for(int task=0;task<3;task++){
                    if(last!=task){
                        int max = points[day][task]+ dp[day-1][task];
                        dp[day][last] = Math.max(max, dp[day][last]);
                    }
                }
            }
        }
        return dp[n-1][3];
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//SPACE OPTIMIZATION
......................................................
  int prev[] = new int[4];
        prev[0] = Math.max(points[0][1], points[0][2]);
        prev[1] = Math.max(points[0][0], points[0][2]);
        prev[2] = Math.max(points[0][0], points[0][1]);
        prev[3] = Math.max(Math.max(points[0][0], points[0][1]),points[0][2]);
        
        int curr[] = new int[4];
        for(int day=1;day<n;day++){
            for(int last=0;last<4;last++){
                curr[last] = 0;
                for(int task=0;task<3;task++){
                    if(last!=task){
                        int max = points[day][task]+ prev[task];
                        curr[last] = Math.max(max, curr[last]);
                    }
                }
            }
            for(int i=0;i<4;i++){
                prev[i]=curr[i];
            }
        }
        return prev[3];
    }
