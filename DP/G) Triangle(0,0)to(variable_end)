EMOIZATION
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int f(int i, int j, int[][] triangle, int n, int dp[][]){
        if(i == n-1){
            return dp[i][j] = triangle[i][j];
        }
        if(dp[i][j]!=-1)
            return dp[i][j];
        int down = f(i+1,j,triangle,n,dp);
        int downright = Integer.MAX_VALUE;
        if(j<=i)
            downright = f(i+1,j+1,triangle,n,dp); 
        return dp[i][j] = triangle[i][j] + Math.min(down ,downright);
    }
    public static int minimumPathSum(int[][] triangle, int n) {
        int dp[][] = new int[n][n];
        for(int row[] : dp)
            Arrays.fill(row,-1);
        return f(0,0,triangle, n, dp);
    }
}
__________________________________________________________________________________________________________________________________________
//TABULIZATION

 public static int minimumPathSum(int[][] triangle, int n) {
        int dp[][] = new int[n][n];
        //BASE CASE
        for(int j=0;j<n;j++)
            dp[n-1][j] = triangle[n-1][j];
            
        for(int i = n-2; i>=0 ; i--){
            for(int j = 0; j<=i ; j++){
                dp[i][j] = triangle[i][j] + Math.min(dp[i+1][j],dp[i+1][j+1]);
            }
        }
        return dp[0][0];
    }
______________________________________________________________________________________________________________________________________________
//SPACE OPTIMIZATION

 public static int minimumPathSum(int[][] triangle, int n) {
        int prev[] = new int[n];
        for(int j=0;j<n;j++)
            prev[j] = triangle[n-1][j];
        for(int i = n-2; i>=0 ; i--){
            int curr[] = new int[n];
            for(int j = 0; j<=i ; j++){
                curr[j] = triangle[i][j] + Math.min(prev[j],prev[j+1]);
            }
            for(int k=0;k<n;k++)
                prev[k] =curr[k];
        }
        return prev[0];
    }
