//MEMOIZATION

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int f(int i, int j, int[][] grid, int[][] dp){
         if(i<0 || j<0)
            return Integer.MAX_VALUE;
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(i==0 && j==0)
            return dp[i][j] = grid[i][j];
        int up = f(i-1,j,grid,dp);
        int left = f(i,j-1,grid,dp);
        return dp[i][j] = grid[i][j]+ Math.min(up , left);
    }
    public static int minSumPath(int[][] grid) {
        int dp[][] = new int[grid.length][grid[0].length];
        for(int row[] : dp)
            Arrays.fill(row,-1);
       return f(grid.length-1, grid[0].length-1, grid,dp);
    }
}
______________________________________________________________________________________________________________________________
//TABULIZATION

public static int minSumPath(int[][] grid) {
        int dp[][] = new int[grid.length][grid[0].length];
        for(int row[] : dp)
            Arrays.fill(row,-1);
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(i==0 && j==0)
                    dp[i][j] = grid[i][j];
                else{
                    int up = Integer.MAX_VALUE;
                    int left = Integer.MAX_VALUE;
                    if(i>0)
                        up = dp[i-1][j];
                    if(j>0)
                        left = dp[i][j-1];
                    dp[i][j] = grid[i][j] + Math.min(up,left);
                }
            }
        }
       return dp[grid.length-1][grid[0].length-1];
    }
 __________________________________________________________________________________________________________________________________________
 //SPACE OPTIMIZATION
 
       public static int minSumPath(int[][] grid) {
        int prev[] = new int[grid[0].length];
        for(int i=0;i<grid.length;i++){
            int curr[] = new int[grid[0].length];
            for(int j=0;j<grid[0].length;j++){
                if(i==0 && j==0)
                    curr[j] = grid[i][j];
                else{
                    int up = Integer.MAX_VALUE;
                    int left = Integer.MAX_VALUE;
                    if(i>0)
                        up = prev[j];
                    if(j>0)
                        left = curr[j-1];
                    curr[j] = grid[i][j] + Math.min(up,left);
                }
            }
            for(int k=0;k<grid[0].length;k++)
                prev[k]=curr[k];
        }
       return prev[grid[0].length-1];
    }
