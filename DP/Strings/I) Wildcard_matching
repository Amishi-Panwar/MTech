//MEMOIZATION
class Solution {
    public int f(int index1, int index2, String s, String p, int dp[][]){
        if(index1 == -1 && index2 == -1)
            return 1;
        if(index1 == -1 && index2>=0){
            if(p.charAt(index2)=='*'){
                return f(index1, index2-1, s, p,dp);
            }
            return 0;
        }
        if(index1>=0 && index2 == -1)
            return 0;
            
            
        if(dp[index1][index2]!=-1)
            return dp[index1][index2];
        if(s.charAt(index1)==p.charAt(index2) || p.charAt(index2)=='?')
            return dp[index1][index2] = f(index1-1, index2-1, s, p,dp);
        if(p.charAt(index2)=='*'){
            return dp[index1][index2] = (f(index1-1, index2, s, p,dp) + f(index1, index2-1, s, p,dp))>=1?1:0;
        }
        return 0;
    }
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();
        int dp[][] =  new int[m+1][n+1];
        for(int row[] : dp)
            Arrays.fill(row,-1);
        return f(m-1, n-1, s, p, dp)==1? true:false;
    }
}
______________________________________________________________________________________________________________________________________
//TABULIZATION

  public boolean isMatch(String s, String p) {
      int m = s.length();
      int n = p.length();
      int dp[][] =  new int[m+1][n+1];
      for(int i=1;i<=m ; i++)
          dp[i][0] = 0;
      dp[0][0] =1;
      for(int j=1;j<=n ; j++){
          if(p.charAt(j-1)=='*' && dp[0][j-1]==1)
              dp[0][j] = 1;
          else 
              dp[0][j] = 0;
      }
      for(int index1=1; index1<=m; index1++){
          for(int index2=1; index2<=n; index2++){
              if(s.charAt(index1-1)==p.charAt(index2-1) || p.charAt(index2-1)=='?')
                  dp[index1][index2] = dp[index1-1][index2-1]>=1?1:0;
              if(p.charAt(index2-1)=='*'){
                  dp[index1][index2] = (dp[index1-1][index2] + dp[index1][index2-1])>=1?1:0;
              }
          }
      }
      return dp[m][n]==1? true:false;
  }
  _______________________________________________________________________________________________________________________________
  //SPACE OPTIMIZATION
  
  class Solution {
    public int f(int index1, int index2, String s, String p, int dp[][]){
        if(index1 == -1 && index2 == -1)
            return 1;
        if(index1 == -1 && index2>=0){
            if(p.charAt(index2)=='*'){
                return f(index1, index2-1, s, p,dp);
            }
            return 0;
        }
        if(index1>=0 && index2 == -1)
            return 0;
        if(dp[index1][index2]!=-1)
            return dp[index1][index2];
        if(s.charAt(index1)==p.charAt(index2) || p.charAt(index2)=='?')
            return dp[index1][index2] = f(index1-1, index2-1, s, p,dp);
        if(p.charAt(index2)=='*'){
            return dp[index1][index2] = (f(index1-1, index2, s, p,dp) + f(index1, index2-1, s, p,dp))>=1?1:0;
        }
        return 0;
    }
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();
        int prev[] =  new int[n+1];
        int curr[] =  new int[n+1];
        prev[0] = 1;
        for(int j=1;j<=n;j++){
            if(p.charAt(j-1)=='*' && prev[j-1]==1)
                prev[j] = 1;
            else 
                prev[j] = 0;
        }
        for(int index1=1; index1<=m; index1++){
            for(int index2=1; index2<=n; index2++){
                if(s.charAt(index1-1)==p.charAt(index2-1) || p.charAt(index2-1)=='?')
                    curr[index2] = prev[index2-1]>=1?1:0;
                else if(p.charAt(index2-1)=='*')
                    curr[index2] = (prev[index2] + curr[index2-1])>=1?1:0;
                else 
                    curr[index2]=0;
                
            }
            prev = (int[])curr.clone();
        }
        return prev[n]==1? true:false;
    }
