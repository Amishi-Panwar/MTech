//MEMOIZATION
class Solution {
    public int f(int index1, int index2, String s, String t, int dp[][]){
        if(index2<=0)
            return 1;
        if(index1<=0)
            return 0;
        if(dp[index1][index2]!=-1)
            return dp[index1][index2];
        if(s.charAt(index1-1) == t.charAt(index2-1))
            return dp[index1][index2] = f(index1-1, index2-1,s,t,dp)+f(index1-1,index2,s,t,dp);
        else
            return dp[index1][index2] = f(index1-1, index2,s,t,dp);
    }
    public int numDistinct(String s, String t) {
        int m = s.length();
        int n = t.length();
        int dp[][] =  new int[m+1][n+1];
        for(int row[]: dp)
            Arrays.fill(row,-1);
        return f(m,n,s,t,dp);
    }
}
____________________________________________________________________________________________________________________________________
//TABULIZATION

public int numDistinct(String s, String t) {
    int m = s.length();
    int n = t.length();
    int dp[][] =  new int[m+1][n+1];
    for(int i=0;i<=m;i++)
        dp[i][0] = 1;
        
    //START FROM j=1 to AVOID OVERRIDE dp[0][0]
    for(int j=1;j<=n;j++)
        dp[0][j] = 0;  

    for(int index1=1;index1<=m;index1++){
        for(int index2=1; index2<=n; index2++){
            if(s.charAt(index1-1) == t.charAt(index2-1))
                dp[index1][index2] = dp[index1-1][index2-1]+dp[index1-1][index2];
            else
                dp[index1][index2] = dp[index1-1][index2];
        }
    }
    return dp[m][n];
 }
 ______________________________________________________________________________________________________________________________________________
 //SPACE OPTIMIZATION
 ??NOT WORKING
 
     public int numDistinct(String s, String t) {
        int m = s.length();
        int n = t.length();
        int prev[] =  new int[n+1];
        int curr[] =  new int[n+1];
        prev[0] = 1;
        curr[0] = 1;
        for(int j=1;j<=n;j++)
            prev[j] = 0; 

        for(int index1=1;index1<=m;index1++){
            for(int index2=1; index2<=n; index2++){
                if(s.charAt(index1-1) == t.charAt(index2-1))
                    curr[index2] = prev[index2-1]+prev[index2];
                else
                    curr[index2] = prev[index2];
            }
            prev = curr;
        }
        return prev[n];
    }
}
