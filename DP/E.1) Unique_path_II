//MEMOIZATION
___________________________________________________________________________________________________
import java.util.*;
public class Solution {
    public static int f(int i, int j, ArrayList<ArrayList<Integer>> mat, int dp[][]){
        if(i>=0  && j>=0 && mat.get(i).get(j)==-1)
            return dp[i][j] = 0;
        if(i==0 && j==0)
            return dp[i][j]=1;
        if(i<0 || j<0)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        return dp[i][j] = (int)((f(i-1,j,mat,dp)+f(i,j-1,mat,dp))%(1000000007));
    }
    
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int dp[][] = new int[n][m];
        for(int row[]: dp)
            Arrays.fill(row,-1);
        return f(n-1, m-1, mat, dp);
        
    }
}
___________________________________________________________________________________________________________
//TABULIZATION

 static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int dp[][] = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat.get(i).get(j) == -1)
                    dp[i][j] = 0;
                else if(i==0 && j==0)
                    dp[i][j] = 1;
                else{
                    int up = 0;
                    int left = 0;
                    if(i>0)
                        up = dp[i-1][j];
                    if(j>0)
                        left  = dp[i][j-1];
                    dp[i][j] = (up+left)%1000000007;
                }
            }
        } 
        return dp[n-1][m-1];
    }
__________________________________________________________________________________________________________________
//SPACE OPTIMIZATION

static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int prev[] = new int[m];
        for(int i=0;i<n;i++){
            int curr[] = new int[m];
            for(int j=0;j<m;j++){
                if(mat.get(i).get(j) == -1)
                    curr[j] = 0;
                else if(i==0 && j==0)
                    curr[j] = 1;
                else{
                    int up = 0;
                    int left = 0;
                    if(i>0)
                        up = prev[j];
                    if(j>0)
                        left  = curr[j-1];
                    curr[j] = (up+left)%1000000007;
                }
            }
            for(int k=0;k<m;k++)
                prev[k]=curr[k];
        } 
        return prev[m-1];
    }
