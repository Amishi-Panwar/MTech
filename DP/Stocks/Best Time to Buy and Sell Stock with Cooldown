//MEMOIZATION
class Solution {
    public int f(int index, int buy, int prices[], int dp[][]){
        if(index>=prices.length)
            return 0;
        if(dp[index][buy]!=-1)
            return dp[index][buy];
        if(buy==1){
            return dp[index][buy] = Math.max(-prices[index]+f(index+1,0,prices,dp), f(index+1,1,prices,dp));
        }
        return dp[index][buy] = Math.max(prices[index]+f(index+2,1,prices,dp),f(index+1,0,prices,dp));
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][] = new int[n+1][2];
            for(int row[] : dp)
                Arrays.fill(row,-1);
        return f(0,1,prices,dp);
    }
}
_________________________________________________________________________________________________________________________________________________
//TABULIZATION

class Solution {
  public int maxProfit(int[] prices) {
      int n = prices.length;
      int dp[][] = new int[n+2][2];
      for(int index=n-1;index>=0;index--){
          for(int buy=0;buy<2;buy++){
                if(buy==1)
          dp[index][buy] = Math.max(-prices[index]+dp[index+1][0], dp[index+1][1]);
      else
      dp[index][buy] = Math.max(prices[index]+dp[index+2][1],dp[index+1][0]);
              }
          }
      return dp[0][1];
  }
}
