//RECURSION
class Solution {
    public int f(int index, int buy, int k, int prices[]){
        if(index==prices.length)
            return 0;
        if(k==0)
            return 0;
        if(buy==1){
            return Math.max(-prices[index]+f(index+1,0,k,prices), f(index+1,1,k,prices));
        }else{
            return Math.max(prices[index]+f(index+1,1,k-1,prices),f(index+1,0,k,prices));
        }
    }
    public int maxProfit(int k, int[] prices) {
        return f(0,1,k,prices);
    }
}
_______________________________________________________________________________________________________________________________________
//MEMOIZATION
class Solution {
    public int f(int index, int buy, int k, int prices[], int dp[][][]){
        if(index==prices.length)
            return 0;
        if(k==0)
            return 0;
        if(dp[index][buy][k]!=-1)
            return dp[index][buy][k];
        if(buy==1){
            return dp[index][buy][k] = Math.max(-prices[index]+f(index+1,0,k,prices,dp), f(index+1,1,k,prices,dp));
        }
        return dp[index][buy][k] = Math.max(prices[index]+f(index+1,1,k-1,prices,dp),f(index+1,0,k,prices,dp));
    }
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n+1][2][k+1];
        for(int i=0;i<prices.length;i++){
            for(int row[] : dp[i])
                Arrays.fill(row,-1);
        }
        return f(0,1,k,prices,dp);
    }
}
__________________________________________________________________________________________________________________________________________________
//TABULIZATION
  public int maxProfit(int k, int[] prices) {
      int n = prices.length;
      int dp[][][] = new int[n+1][2][k+1];
      for(int index=n-1;index>=0;index--){
          for(int buy=0;buy<2;buy++){
              for(int t=1;t<=k;t++){
                  if(buy==1)
          dp[index][buy][t] = Math.max(-prices[index]+dp[index+1][0][t], dp[index+1][1][t]);
      else
      dp[index][buy][t] = Math.max(prices[index]+dp[index+1][1][t-1],dp[index+1][0][t]);
              }
          }
      }
      return dp[0][1][k];
  }
  __________________________________________________________________________________________________________________________________________________
  
