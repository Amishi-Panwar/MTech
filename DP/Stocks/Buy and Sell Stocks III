//MEMOIZATION
class Solution {
    public int f(int index, int prices[], int buy, int k, int dp[][][]){
        if(k==0)
            return 0;
        if(index == prices.length)
            return 0;
        if(dp[index][buy][k]!=-1)
            return dp[index][buy][k];
        if(buy==1){
            return dp[index][buy][k] = Math.max(-prices[index]+f(index+1,prices,0,k,dp),f(index+1,prices,1,k,dp));
        }
        return dp[index][buy][k] = Math.max(prices[index]+f(index+1,prices,1,k-1,dp),f(index+1,prices,0,k,dp));
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][][] =  new int[n+1][2][3];
        for(int i=0;i<=n;i++){
            for(int row[]: dp[i])
                Arrays.fill(row,-1);
        }
        return f(0, prices, 1,2,dp);
    }
}
_______________________________________________________________________________________________________________________________________
//TABULIZATION
public int maxProfit(int[] prices) {
    int n = prices.length;
    int dp[][][] =  new int[n+1][2][3];
    for(int i=0;i<=n;i++){
        for(int j=0;j<2;j++)
            dp[i][j][0] = 0;
    }
    for(int j=0;j<2;j++){
        for(int k=0;k<3;k++)
            dp[n][j][k] = 0;
    }
    for(int index=n-1;index>=0;index--){
        for(int buy=0;buy<2;buy++){
            for(int k=1;k<3;k++){
                if(buy==1){
                    dp[index][buy][k] = Math.max(-prices[index]+dp[index+1][0][k],dp[index+1][1][k]);
    }else
                dp[index][buy][k] = Math.max(prices[index]+dp[index+1][1][k-1],dp[index+1][0][k]);
            }
        }
    }

    return dp[0][1][2];
}
_______________________________________________________________________________________________________________________________________
//SPACE OPTIMIZATION

 public int maxProfit(int[] prices) {
        int n = prices.length;
        int after[][] =  new int[2][3];
        int curr[][] =  new int[2][3];
        //we can omit base case as default value is 0 anyways
        for(int j=0;j<2;j++)
            after[j][0] = 0;
        
        for(int j=0;j<2;j++){
            for(int k=0;k<3;k++)
                after[j][k] = 0;
        }
        for(int index=n-1;index>=0;index--){
            for(int buy=0;buy<2;buy++){
                for(int k=1;k<3;k++){
                    if(buy==1){
                        curr[buy][k] = Math.max(-prices[index]+after[0][k],after[1][k]);
        }else
                    curr[buy][k] = Math.max(prices[index]+after[1][k-1],after[0][k]);
                }
            }
            after = curr;
        }

        return after[1][2];
    }
