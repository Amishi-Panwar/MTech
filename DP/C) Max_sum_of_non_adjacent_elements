
import java.util.* ;
import java.io.*; 
import java.util.*;
public class Solution {

    //memoization
    public static int f(int index, ArrayList<Integer> nums, int dp[]){
        if(index == 0)
            return dp[index] = nums.get(0);
        if(index < 0)
            return 0;
        if(dp[index]!=-1)
            return dp[index];
        int pick = nums.get(index) + f(index-2, nums, dp);
        int nonpick = f(index-1, nums,dp);
        return dp[index] = Math.max(pick, nonpick);
    }
   
    public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
        int dp[]=new int[nums.size()];
        for(int i=0;i<nums.size();i++)
            dp[i]=-1;
        f(nums.size()-1, nums, dp);
        return dp[nums.size()-1];

//SPACE OPTIMIZATION
//         int prev2=0;
//         int prev=nums.get(0);
//         for(int i=1;i<nums.size();i++){
//             int pick=nums.get(i);
//             if(i>1)
//                 pick+=prev2;
//             int nonpick = prev;
//             int curr=Math.max(pick, nonpick);
//             prev2=prev;
//             prev=curr;
//         }
//         return prev;

    }
}
