//MEMOIZATION

class Solution {
    public int f(int index, int amount, int coins[],int dp[][]){
        if(index==0){
            if(amount%coins[index]==0)
                return amount/coins[index];
            else
                return (int)1e9;
        }
        if(dp[index][amount]!=-1)
            return dp[index][amount];
        int nottaken = f(index-1,amount,coins,dp);
        int taken = Integer.MAX_VALUE;
        if(coins[index]<=amount)
            taken = 1+f(index,amount-coins[index],coins,dp);
        return dp[index][amount] = Math.min(nottaken,taken);
    }
    public int coinChange(int[] coins, int amount) {
        int dp[][] =  new int[coins.length][amount+1];
        for(int row[] : dp)
            Arrays.fill(row,-1);
        int ans = f(coins.length-1,amount,coins,dp);
        if(ans>=(int)1e9)
            return -1;
        return ans;
    }
}
_________________________________________________________________________________________________________________________________________
//TABULIZATION

public int coinChange(int[] coins, int amount) {
        int dp[][] =  new int[coins.length][amount+1];
        for(int target = 0;target<=amount;target++)
            if(target%coins[0]==0)
                dp[0][target] = target/coins[0];
            else
                dp[0][target] = (int)1e9;
        
        for(int index=1;index<coins.length;index++){
            for(int target=0;target<=amount;target++){
                int nottaken = dp[index-1][target];
                int taken = (int)1e9;
                if(coins[index]<=target)
                    taken = 1+dp[index][target-coins[index]];
                dp[index][target] = Math.min(nottaken,taken);
            }
        }
        int ans = dp[coins.length-1][amount];
        if(ans>=(int)1e9)
            return -1;
        return ans;
    }
  _______________________________________________________________________________________________________________________________________________
  //SPACE OPTIMIZATION
  
  public int coinChange(int[] coins, int amount) {
        int prev[] =  new int[amount+1];
        int curr[] =  new int[amount+1];
        for(int target = 0;target<=amount;target++)
            if(target%coins[0]==0)
                prev[target] = target/coins[0];
            else
                prev[target] = (int)1e9;
        
        for(int index=1;index<coins.length;index++){
            for(int target=0;target<=amount;target++){
                int nottaken = prev[target];
                int taken = (int)1e9;
                if(coins[index]<=target)
                    taken = 1+curr[target-coins[index]];
                curr[target] = Math.min(nottaken,taken);
            }
            prev=curr;
        }
        int ans = prev[amount];
        if(ans>=(int)1e9)
            return -1;
        return ans;
    }
