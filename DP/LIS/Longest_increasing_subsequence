class Solution {
    public int f(int index, int prev, int nums[],int dp[][]){
        if(index==nums.length)
            return 0;
        if(dp[index][prev+1]!=-1)
            return dp[index][prev+1];
        int pick = 0;
        if(prev==-1 || nums[index]>nums[prev])
            pick = 1+f(index+1, index, nums,dp);
        int nonpick = f(index+1, prev,nums,dp);
        return dp[index][prev+1] = Math.max(pick,nonpick);
    }
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[][] = new int[n+1][n];
        for(int row[]: dp)
            Arrays.fill(row,-1);
        return f(0,-1,nums,dp);
    }
}
________________________________________________________________________________________________________
//Tabulization

class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[][] = new int[n+1][n+1];
        for(int i=0;i<n;i++)
            dp[n][i]=0;
        for(int index=n-1;index>=0;index--){
            for(int prev=index-1;prev>=-1;prev--){
                int pick = 0;
                int nonpick = 0;
                if(prev == -1 || nums[index]>nums[prev])
                    pick = 1+dp[index+1][index+1];
                nonpick = dp[index+1][prev+1];
                dp[index][prev+1] = Math.max(pick,nonpick);
            }
        }
        return dp[0][0];
    }
}
_______________________________________________________________________________________________________________________________
//SPACE OPTIMIZATION
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int next[] = new int[n+1];
        int curr[] = new int[n+1];
        // for(int i=0;i<n;i++)
        //     next[i]=0;
        for(int index=n-1;index>=0;index--){
            for(int prev=index-1;prev>=-1;prev--){
                int pick = 0;
                int nonpick = 0;
                if(prev == -1 || nums[index]>nums[prev])
                    pick = 1+next[index+1];
                nonpick = next[prev+1];
                curr[prev+1] = Math.max(pick,nonpick);
            }
            next = curr;
        }
        return next[0];
    }
}
_____________________________________________________________________________________________________________________________
//1DDP
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[] = new int[n];
        Arrays.fill(dp,1);
        int max=1;
        for(int index=0;index<n;index++){
            for(int j=0;j<index;j++){
                if(nums[j]<nums[index])
                    dp[index] = Math.max(dp[index],dp[j]+1);
            }
            max = Math.max(max,dp[index]);
        }
        return max;
    }
 _______________________________________________________________________________________________________________________
 //PRINTING LIS
  public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[] = new int[n];
        int hash[] = new int[n];
        Arrays.fill(dp,1);
        for(int i=0;i<n;i++)
            hash[i]=i;
        int max=1, maxIndex=0;
        for(int index=0;index<n;index++){
            for(int j=0;j<index;j++){
                if(nums[j]<nums[index]){
                    if(dp[j]+1>dp[index]){
                        dp[index] = dp[j]+1;
                        hash[index] = j;
                    }
                }
            }
            if(dp[index]>max)
                maxIndex = index;
        }

        max=maxIndex;
        do{
            System.out.println(nums[maxIndex]);
            maxIndex=hash[maxIndex];
        }while(maxIndex!=hash[maxIndex]);
        
        System.out.println(nums[maxIndex]);
        return dp[max];
    }
}
___________________________________________________________________________________________________________________
//BINARY SEARCH SOLUTION
class Solution {
    public int binarySearch(int l, int r, ArrayList<Integer> temp, int x){
        while(l<=r){
            int mid =l+(r-l)/2;
            if(temp.get(mid)<x)
                l = mid+1;
            else
                r = mid-1;
        }
        return l;
    }
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        ArrayList<Integer> temp =new ArrayList<>();
        temp.add(nums[0]);
        for(int i=1;i<n;i++){
            int index = binarySearch(0,temp.size()-1,temp,nums[i]);
            if(index==temp.size())
                temp.add(nums[i]);
            else
                temp.set(index,nums[i]);
        }
        return temp.size();
    }
}
    
