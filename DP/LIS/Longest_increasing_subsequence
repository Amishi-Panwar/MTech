class Solution {
    public int f(int index, int prev, int nums[],int dp[][]){
        if(index==nums.length)
            return 0;
        if(dp[index][prev+1]!=-1)
            return dp[index][prev+1];
        int pick = 0;
        if(prev==-1 || nums[index]>nums[prev])
            pick = 1+f(index+1, index, nums,dp);
        int nonpick = f(index+1, prev,nums,dp);
        return dp[index][prev+1] = Math.max(pick,nonpick);
    }
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[][] = new int[n+1][n];
        for(int row[]: dp)
            Arrays.fill(row,-1);
        return f(0,-1,nums,dp);
    }
}
________________________________________________________________________________________________________
//Tabulization

class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[][] = new int[n+1][n+1];
        for(int i=0;i<n;i++)
            dp[n][i]=0;
        for(int index=n-1;index>=0;index--){
            for(int prev=index-1;prev>=-1;prev--){
                int pick = 0;
                int nonpick = 0;
                if(prev == -1 || nums[index]>nums[prev])
                    pick = 1+dp[index+1][index+1];
                nonpick = dp[index+1][prev+1];
                dp[index][prev+1] = Math.max(pick,nonpick);
            }
        }
        return dp[0][0];
    }
}
_______________________________________________________________________________________________________________________________
//SPACE OPTIMIZATION
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int next[] = new int[n+1];
        int curr[] = new int[n+1];
        // for(int i=0;i<n;i++)
        //     next[i]=0;
        for(int index=n-1;index>=0;index--){
            for(int prev=index-1;prev>=-1;prev--){
                int pick = 0;
                int nonpick = 0;
                if(prev == -1 || nums[index]>nums[prev])
                    pick = 1+next[index+1];
                nonpick = next[prev+1];
                curr[prev+1] = Math.max(pick,nonpick);
            }
            next = curr;
        }
        return next[0];
    }
}
