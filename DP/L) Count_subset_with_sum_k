//2 Wrong ans
//MEMOIZATION

public static int f(int index,int num[],int target,int dp[][]){
    //CHANGE IN BASE CASE when element can be 0, TO COUNT (0,1) as new subset
    if(index==0){
        if(target == 0 && num[0]==0)
            return 2;
        if(target == 0 || target == num[0])
            return 1;
        return 0;
    }

    if(dp[index][target]!=-1)
        return dp[index][target];
    int notpick = f(index-1,num,target,dp);
    int pick = 0;
    if(num[index]<=target)
        pick = f(index-1,num,target-num[index],dp);
    return dp[index][target] = pick + notpick;
}
public static int findWays(int num[], int tar) {
    int dp[][] = new int[num.length][tar+1];
    for(int row[]: dp)
        Arrays.fill(row,-1);
    return f(num.length-1,num,tar,dp);
}
_______________________________________________________________________________________________________________________________________
//TABULIZATION

   public static int findWays(int arr[], int tar) {
       
        int prev[] = new int[tar+1];
        int curr[] = new int[tar+1];
        prev[0] = 1;
        curr[0] = 1;
        if(arr[0] <= tar)
            prev[arr[0]] = 1;

        for(int index=1;index<arr.length;index++){
            for(int j=1;j<=tar;j++){
                int notpick = prev[j];
                int pick = 0;
                if(j-arr[index]>=0)
                    pick = prev[j-arr[index]];
   
                curr[j]=notpick + pick;
            }
            for(int l=0;l<=tar;l++)
                prev[l]=curr[l];
        }
        return prev[tar];
    
    }
}
