//MEMOIZATION
class Solution {
    public int f(int index, int amount, int coins[],int dp[][]){
        if(index==0){
            if(amount%coins[index]==0)
                return 1;
            else
                return 0;
        }
        if(dp[index][amount]!=-1)
            return dp[index][amount];
        int nottaken = f(index-1,amount,coins,dp);
        int taken = 0;
        if(coins[index]<=amount)
            taken = f(index,amount-coins[index],coins,dp);
        return dp[index][amount] = nottaken+taken;
    }
    public int change(int amount, int[] coins) {
        int dp[][] =  new int[coins.length][amount+1];
        for(int row[] : dp)
            Arrays.fill(row,-1);
        return f(coins.length-1,amount,coins,dp);
    }
}
___________________________________________________________________________________________________________
//TABULIZATION

class Solution {
    public int f(int index, int amount, int coins[],int dp[][]){
        if(index==0){
            if(amount%coins[index]==0)
                return 1;
            else
                return 0;
        }
        if(dp[index][amount]!=-1)
            return dp[index][amount];
        int nottaken = f(index-1,amount,coins,dp);
        int taken = 0;
        if(coins[index]<=amount)
            taken = f(index,amount-coins[index],coins,dp);
        return dp[index][amount] = nottaken+taken;
    }
    public int change(int amount, int[] coins) {
        int prev[] =  new int[amount+1];
        int curr[] =  new int[amount+1];
        for(int target = 0;target<=amount;target++)
            if(target%coins[0]==0)
                prev[target] = 1;
            else
                prev[target] = 0;
        
        for(int index=1;index<coins.length;index++){
            for(int target=0;target<=amount;target++){
                int nottaken = prev[target];
                int taken = 0;
                if(coins[index]<=target)
                    taken = curr[target-coins[index]];
                curr[target] = nottaken+taken;
            }
            prev=curr;
        }
        return prev[amount];
    }
}
