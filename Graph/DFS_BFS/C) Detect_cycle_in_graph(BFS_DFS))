//BFS- check for parent if node found visited, if its not its parent means someonelese visited and now you visiting..tadaaa...its a cycle
class Pair{
    int node;
    int prev;
    Pair(int node, int prev){
        node=node;
        prev=prev;
    }
}

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean bfs(int src, ArrayList<ArrayList<Integer>> adj, int visited[]){
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(src,-1));
        visited[src]=1;
        while(!q.isEmpty()){
            Pair p=q.poll();
            for(Integer it: adj.get(p.node)){
                if(visited[it]==0){
                    q.add(new Pair(it,p.node));
                    visited[it]=1;
                }else if(p.prev!=it)
                    return true;
            }    
        }
        return false;
    }
    
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        int n = adj.size();
        int visited[] = new int[n];
        for(int i=0;i<n;i++){
            if(visited[i]==0){
                if(bfs(i,adj,visited)==true)
                    return true;
            }
        }
        return false;
    }
    

}
_____________________________________________________________________________________________________________________________________________
//DFS- check for parent if node found visited, if its not its parent means someonelese visited and now you visiting..tadaaa...its a cycle
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean dfs(int node, int parent, ArrayList<ArrayList<Integer>> adj, int visited[]){
       visited[node]=1;
       for(int it: adj.get(node)){
            if(visited[it]==0){
                if(dfs(it, node, adj, visited)==true)
                    return true;
            }else if(it!=parent)
                return true;
       }
       return false;
    }
    
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        int n = adj.size();
        int visited[] = new int[n];
        for(int i=0;i<n;i++){
            if(visited[i]==0){
                if(dfs(i,-1,adj,visited)==true)
                    return true;
            }
        }
        return false;
    }
}
    
