class Pair{
    String first;
    int second;
    Pair(String _first, int _second){
        first = _first;
        second = _second;
    }
}
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> set = new HashSet<>();
        int n = wordList.size();
        for(int i=0;i<n;i++){
            set.add(wordList.get(i));
        }
        set.remove(beginWord);
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(beginWord,1));
        while(!q.isEmpty()){
            Pair p = q.poll();
            String s = p.first;
            int steps = p.second;
            if(s.equals(endWord)==true)
                return steps;
            for(int i=0;i<s.length();i++){
                for(char ch='a'; ch<='z'; ch++){
                    char prevArray[] = s.toCharArray();
                    prevArray[i] = ch;
                    String newStr = new String(prevArray);
                    if(set.contains(newStr)==true){
                        q.add(new Pair(newStr,steps+1));
                        set.remove(newStr);
                    }
                }
            }
        }
        return 0;
    }
}
