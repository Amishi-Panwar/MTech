
class Solution
{
    public String topoSort(ArrayList<ArrayList<Integer>> adj, int K){
        int indegree[] = new int[K];
        for(int i=0;i<K;i++){
            for(Integer it: adj.get(i)){
                indegree[it]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<K;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        String ans="";
        while(!q.isEmpty()){
            int x = q.poll();
            ans+=(char)(x+(int)'a');
            for(Integer it: adj.get(x)){
                indegree[it]--;
                if(indegree[it]==0)
                    q.add(it);
            }
        }
        // System.out.println(ans);
        return ans;
    }
    public String findOrder(String [] dict, int N, int K)
    {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<K;i++)
            adj.add(new ArrayList<>());
        
        for(int i=0;i<N-1;i++){
            String s1 = dict[i];
            String s2 = dict[i+1];
            int l1=0,l2=0;
            while(l1<s1.length() && l2<s2.length()){
                if(s1.charAt(l1)!=s2.charAt(l2)){
                    adj.get(s1.charAt(l1)-'a').add(s2.charAt(l2)-'a');
                    break;
                }
                l1++;
                l2++;
            }
        }
        
        return topoSort(adj,K);
        
    }
}
