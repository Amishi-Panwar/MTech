class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj= new ArrayList<>();
        for(int i=0;i<numCourses;i++)
            adj.add(new ArrayList<>());

        //create adj list
        for(int i=0;i<prerequisites.length;i++){
                adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }

        int indegree[] = new int[numCourses];
        for(int i=0;i<numCourses;i++){
            for(Integer it: adj.get(i)){
                indegree[it]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<numCourses;i++)
            if(indegree[i]==0)
                q.add(i);
        int index=0;
        while(!q.isEmpty()){
            int x = q.poll();
            index++;
            for(Integer it : adj.get(x)){
                indegree[it]--;
                if(indegree[it]==0)
                    q.add(it);
            }
        }
        if(index==numCourses)
            return true;
        return false;
    }

}
