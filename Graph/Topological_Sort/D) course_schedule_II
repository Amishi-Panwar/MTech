class Solution {

    public boolean dfs(int node,ArrayList<ArrayList<Integer>> adj,int[][] prerequisites,int visited[],int pathvis[], ArrayList<Integer>pathorder){
        visited[node]=1;
        pathvis[node]=1;
        pathorder.add(node);
        for(Integer it: adj.get(node)){
            if(visited[it]==0){
                if(dfs(it,adj,prerequisites,visited,pathvis,pathorder))
                    return true;
            }else if(pathvis[it]==1)
                return true;
        }
        pathvis[node]=0;
        return false;
    }

    public int[] findOrder(int numCourses, int[][] prerequisites) {

        ArrayList<ArrayList<Integer>> adj= new ArrayList<>();
        for(int i=0;i<numCourses;i++)
            adj.add(new ArrayList<>());

        //create adj list
        for(int i=0;i<prerequisites.length;i++){
                adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }

        int indegree[] = new int[numCourses];
        for(int i=0;i<numCourses;i++){
            for(Integer it: adj.get(i)){
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<numCourses;i++)
            if(indegree[i]==0)
                q.add(i);

        int topo[] = new int[numCourses];
        int index=0;
        while(!q.isEmpty()){
            int x = q.poll();
            topo[index]=x;
            index++;
            for(Integer it : adj.get(x)){
                indegree[it]--;
                if(indegree[it]==0)
                    q.add(it);
            }
        }
        if(index!=numCourses)
            return new int[0];
        return topo;
    }
}
