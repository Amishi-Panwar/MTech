class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int V = graph.length;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<V;i++)
            adj.add(new ArrayList<>());

        int indegree[] = new int[V];
        for(int i=0;i<V;i++){
            for(int j=0;j<graph[i].length;j++){
                adj.get(graph[i][j]).add(i);
                indegree[i]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0)
                q.add(i);
        }
        ArrayList<Integer> safenodes = new ArrayList<>();
        while(!q.isEmpty()){
            int x = q.poll();
            safenodes.add(x);
            for(Integer i : adj.get(x)){
                indegree[i]--;
                if(indegree[i]==0)
                    q.add(i);
                }
        }
        Collections.sort(safenodes);
        return safenodes;
    }
}
