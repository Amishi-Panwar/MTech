
class Solution
{
    static void dfs(int node, ArrayList<ArrayList<Integer>> adj, int visited[], Stack<Integer>s){
        visited[node]=1;
        for(Integer it: adj.get(node)){
            if(visited[it]==0){
                dfs(it,adj,visited,s);
            }
        }
        //push at end
        s.push(node);
    }
    
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        int visited[] = new int[V];
        Stack<Integer> s = new Stack<>();
        for(int i=0;i<V;i++){
            if(visited[i]==0){
                dfs(i,adj,visited,s);
            }
        }
        int ans[] = new int[V];
        int i=0;
        while(!s.isEmpty()){
            ans[i]=s.pop();
            i++;
        }
        return ans;
    }
}
