
class Pair{
    int first;
    int second;
    Pair(int _first, int _second){
        first = _first;
        second = _second;
    }
}
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)-> a.second-b.second);
        int distance[] = new int[V];
        for(int i=0;i<V;i++)
            distance[i] = (int)(1e9);
        distance[S]=0;
        pq.add(new Pair(S,0));
        while(!pq.isEmpty()){
            Pair p = pq.poll();
            int node = p.first;
            int weight = p.second;
            for(int i=0; i<adj.get(node).size(); i++){
                int adjNode = adj.get(node).get(i).get(0);
                int w = adj.get(node).get(i).get(1);
                if(distance[adjNode]> weight + w){
                    distance[adjNode] = weight+w;
                    pq.add(new Pair(adjNode,distance[adjNode]));
                }
            }
        }
        return distance;
    }
}
