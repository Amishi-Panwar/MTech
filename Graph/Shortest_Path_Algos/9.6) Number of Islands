
class DisjointSet{
    int parent[];
    int rank[];
    DisjointSet(int n){
        parent =  new int[n];
        rank = new int[n];
        for(int i=0;i<n;i++){
            parent[i]=i;
            rank[i]=1;
        }
    }
    
    int findParent(int X){
        if(X==parent[X])
            return X;
        return parent[X] = findParent(parent[X]);
    }
    
    void unionByRank(int u, int v){
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);
        if(ulp_u==ulp_v)
            return;
        else if(rank[ulp_u]<rank[ulp_v])
            parent[ulp_u]=ulp_v;
        else if(rank[ulp_u]>rank[ulp_v])
            parent[ulp_v]=ulp_u;
        else{
            parent[ulp_u]=ulp_v;
            rank[ulp_v]++;
        }
    }
}

class Solution {
    
    public List<Integer> numOfIslands(int rows, int cols, int[][] operators) {
        DisjointSet ds = new DisjointSet(rows*cols);
        int visited[][] = new int[rows][cols];

        ArrayList<Integer> ans = new ArrayList<>();
        int count=0;
        for(int i=0;i<operators.length;i++){
            int r = operators[i][0];
            int c = operators[i][1];
            if(visited[r][c]==1){
                ans.add(count);
                continue;
            }
            visited[r][c]=1;
            count++;
            int dr[] = new int[]{-1,0,1,0};
            int dc[] = new int[]{0,1,0,-1};
            for(int k=0;k<4;k++){
                int adjr = dr[k]+r;
                int adjc = dc[k]+c;
                if(adjr<rows && adjr>=0 && adjc>=0 && adjc<cols){
                    if(visited[adjr][adjc]==1){
                        int nodeno = r*cols+c;
                        int adjnodeno = adjr*cols+adjc;
                        if(ds.findParent(nodeno) != ds.findParent(adjnodeno)){
                            count--;
                            ds.unionByRank(nodeno, adjnodeno);
                        }
                    }
                        
                }
            }
            ans.add(count);
        }
        return ans;
    }
    
}
