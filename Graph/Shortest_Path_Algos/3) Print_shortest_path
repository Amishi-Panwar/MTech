
// User function Template for Java
class Pair{
    int first;
    int second;
    Pair(int _first, int _second){
        first = _first;
        second = _second;
    }
}
class Solution {
    public static List<Integer> shortestPath(int n, int m, int edges[][]) {
        // code here
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0;i<n+1;i++){
            adj.add(new ArrayList());
        }
        for(int i=0;i<m;i++){
            adj.get(edges[i][0]).add(new Pair(edges[i][1], edges[i][2]));
            adj.get(edges[i][1]).add(new Pair(edges[i][0], edges[i][2]));
        }
        
        PriorityQueue<Pair> pq = new PriorityQueue<>((Pair a,Pair b)->a.second-b.second);
        int dist[] = new int[n+1];
        int parent[] = new int[n+1];
        for(int i=0;i<n+1;i++)
            dist[i]=(int)(1e9);
        pq.add(new Pair(1,0));
        dist[1]=0;
        parent[1]=1;
        while(!pq.isEmpty()){
            Pair p = pq.poll();
            int node = p.first;
            int weight = p.second;
            for(int i=0; i<adj.get(node).size();i++){
                int adjNode = adj.get(node).get(i).first;
                int w = weight + adj.get(node).get(i).second;
                if(dist[adjNode]>w){
                    dist[adjNode]=w;
                    parent[adjNode]=node;
                    pq.add(new Pair(adjNode, dist[adjNode]));
                }
            }
        }
        
        List<Integer> ans = new ArrayList<>();
        int desti = n;
        if(dist[desti]==(int)(1e9)){
            ans.add(-1);
            return ans;
        }
        ans.add(desti);
        while(parent[desti]!=desti){
            ans.add(parent[desti]);
            desti = parent[desti];
        }
        Collections.reverse(ans);
        return ans;
    }
}
