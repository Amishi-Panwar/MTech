// User function Template for Java
class Pair implements Comparable<Pair>{
    int src;
    int dest;
    int weight;
    Pair(int _src, int _dest, int _weight){
        src = _src;
        dest = _dest;
        weight = _weight;
    }
    public int compareTo(Pair p){
        return this.weight-p.weight;
    }
}

class DisjointSet{
    int parent[];
    int rank[];
    DisjointSet(int n){
        parent  = new int[n];
        rank = new int[n];
        for(int i=0;i<n;i++){
            parent[i]=i;
            rank[i]=1;
        }
    }
    
    int findParent(int X){
        if(X==parent[X])
            return X;
        return parent[X]=findParent(parent[X]);
    }
    
    void unionByRank(int u, int v){
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);
        if(ulp_u==ulp_v){
             return;
        }else if(rank[ulp_u]<rank[ulp_v]){
            parent[ulp_u]=parent[ulp_v];
        }else if(rank[ulp_u]>rank[ulp_v]){
            parent[ulp_v]=parent[ulp_u];
        }else{
            parent[ulp_u]=ulp_v;
            rank[ulp_v]++;
        }
    }
}

class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	   ArrayList<Pair> adj = new ArrayList<>();
	   for(int i=0;i<E;i++){
	       adj.add(new Pair(edges[i][0],edges[i][1],edges[i][2]));
	   }
	   Collections.sort(adj);
	   int cost=0;
	   DisjointSet ds = new DisjointSet(V);
	   for(int i=0;i<E;i++){
	       int u = adj.get(i).src;
	       int v = adj.get(i).dest;
	       int w = adj.get(i).weight;
	       if(ds.findParent(u)!=ds.findParent(v)){
	           cost+=w;
	           ds.unionByRank(u,v);
	       }
	   }
	   return cost;
	   
	}
}
_____________________________________________________________________________________________________________
//BY_SIZE

// User function Template for Java
class Pair implements Comparable<Pair>{
    int src;
    int dest;
    int weight;
    Pair(int _src, int _dest, int _weight){
        src = _src;
        dest = _dest;
        weight = _weight;
    }
    public int compareTo(Pair p){
        return this.weight-p.weight;
    }
}

class DisjointSet{
    int parent[];
    int size[];
    DisjointSet(int n){
        parent  = new int[n];
        size = new int[n];
        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }
    
    int findParent(int X){
        if(X==parent[X])
            return X;
        return parent[X]=findParent(parent[X]);
    }
    
    void unionBySize(int u, int v){
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);
        if(ulp_u==ulp_v){
             return;
        }else if(size[ulp_u]<size[ulp_v]){
            parent[ulp_u]=parent[ulp_v];
        }else if(size[ulp_u]>size[ulp_v]){
            parent[ulp_v]=parent[ulp_u];
        }else{
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }
    }
}

class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	   ArrayList<Pair> adj = new ArrayList<>();
	   for(int i=0;i<E;i++){
	       adj.add(new Pair(edges[i][0],edges[i][1],edges[i][2]));
	   }
	   Collections.sort(adj);
	   int cost=0;
	   DisjointSet ds = new DisjointSet(V);
	   for(int i=0;i<E;i++){
	       int u = adj.get(i).src;
	       int v = adj.get(i).dest;
	       int w = adj.get(i).weight;
	       if(ds.findParent(u)!=ds.findParent(v)){
	           cost+=w;
	           ds.unionBySize(u,v);
	       }
	   }
	   return cost;
	   
	}
}
