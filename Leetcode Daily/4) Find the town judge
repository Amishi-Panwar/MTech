class Solution {
    public int findJudge(int n, int[][] trust) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<trust.length;i++){
            adj.get(trust[i][0]).add(trust[i][1]);
        }
        int townJudge=-1;
        for(int i=1;i<=n;i++){
            if(adj.get(i).size()==0)
                townJudge=i;
        }
        int visited[] = new int[n+1];
        for(int i=0;i<trust.length;i++){
            if(trust[i][1]==townJudge)
                visited[trust[i][0]]=1;
        }
        for(int i=1;i<=n;i++){
            if(i!=townJudge && visited[i]==0){
                return -1;
            }
        }
        return townJudge;
    }
}
//Another solution: calculate indegree and outdegree and check whose indegree is n-1 and outdegree==0

